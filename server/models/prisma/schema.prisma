// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  ADMIN
  USER
}

model Role {
  id    String   @id @unique @default(uuid())
  name  RoleName @unique
  users User[]
}

model User {
  id         String     @id @unique @default(uuid())
  firstName  String
  lastName   String
  age        Int
  email      String     @unique
  password   String
  university String
  speciality String
  role       Role       @relation(fields: [roleId], references: [id])
  roleId     String
  llmStats   LLMStats[]
  pdfUploads Pdf[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model LLM {
  id        String     @id @unique @default(uuid())
  name      String     @unique
  version   String
  status    String
  userStats LLMStats[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model LLMStats {
  id           String   @id @unique @default(uuid())
  inputTokens  Int
  outputTokens Int
  nbrQuestions Int
  llmId        String
  llm          LLM      @relation(fields: [llmId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
   @@unique([llmId, userId])
}

model Pdf {
  id         String    @id @default(uuid())
  userId     String
  fileName   String
  uploadedAt DateTime  @default(now())
  indexed    Boolean   @default(false)
  indexDate  DateTime?
  size       Int?
  user     User   @relation(fields: [userId], references: [id])
  filePath String
  indexName String @unique
  @@unique([userId, indexName]) 
}